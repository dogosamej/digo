// 1. Configuración inicial del backend (por ejemplo, en Render)
// Archivo: server.js

const express = require('express');
const axios = require('axios');
const cors = require('cors');
const app = express();
require('dotenv').config();

app.use(cors());

const CLIENT_ID = process.env.SPOTIFY_CLIENT_ID;
const CLIENT_SECRET = process.env.SPOTIFY_CLIENT_SECRET;
const REDIRECT_URI = process.env.REDIRECT_URI; // e.g. https://tu-app.onrender.com/callback

// Endpoint para iniciar el login
app.get('/spotify-login', (req, res) => {
  const scopes = [
    'user-read-playback-state',
    'user-modify-playback-state',
    'user-read-currently-playing'
  ].join(' ');
  const redirect =
    `https://accounts.spotify.com/authorize?response_type=code&client_id=${CLIENT_ID}&scope=${encodeURIComponent(scopes)}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}`;
  res.redirect(redirect);
});

// Endpoint de callback
app.get('/callback', async (req, res) => {
  const code = req.query.code || null;
  try {
    const response = await axios.post('https://accounts.spotify.com/api/token', new URLSearchParams({
      grant_type: 'authorization_code',
      code,
      redirect_uri: REDIRECT_URI,
      client_id: CLIENT_ID,
      client_secret: CLIENT_SECRET,
    }), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    });

    const { access_token, refresh_token } = response.data;

    // Aquí puedes devolver los tokens al plugin de Chrome
    res.send(`<script>
      window.opener.postMessage({
        type: 'SPOTIFY_TOKENS',
        access_token: '${access_token}',
        refresh_token: '${refresh_token}'
      }, '*');
      window.close();
    </script>`);
  } catch (err) {
    console.error(err);
    res.send('Error al obtener los tokens');
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Servidor activo en ${PORT}`));
